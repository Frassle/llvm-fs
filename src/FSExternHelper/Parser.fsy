%{
open Microsoft.FSharp.Text.Parsing
open FSExternHelper.HeaderSyntax

// NOTE: fsyacc expects this function to be named parse_error_rich
let parse_error_rich =
    let parseError (errorContext : ParseErrorContext<_>) =
        let fstResultRange = fst errorContext.ParseState.ResultRange
        match fstResultRange :> obj with
        | null -> eprintfn "Parse error near start of file"
        | _    -> eprintfn "Parse error near line %i" fstResultRange.Line
        
        exit 1
    
    Some parseError
%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int32> INTCONST
%token <string> NAME
%token SEMICOL COMMA ASTER LPAREN RPAREN EOF LCURL RCURL
%token STRUCT ENUM TYPEDEF EQ SHIFTL
%token CONST VOID CHAR INT LONG DOUBLE FLOAT UNSIGNED SHORT UINT8

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < CDef list > start

%%

start: Defs { $1 }

Defs:
    | Def Defs  { $1 :: $2 }
    | EOF       { [] }

Def:
    | FullType NAME LPAREN Params RPAREN SEMICOL        { CFuncDef ($1, $2, $4) }
    | TYPEDEF ENUM LCURL EnumVals RCURL NAME SEMICOL    { CEnumDef ($6, $4) }
    | TYPEDEF FullType NAME SEMICOL                     { CTypeAlias ($2, $3) }

EnumVals:
    | EnumVal COMMA EnumVals { $1 :: $3 }
    | EnumVal                { [$1] }

EnumVal:
    | NAME { ($1, None) }
    | NAME EQ IntVal { ($1, Some $3) }

IntVal:
    | INTCONST SHIFTL INTCONST { $1 <<< $3 }
    | INTCONST { $1 }

FullType:
    | CONST BaseType Pointers   { {baseType = $2; isConst = true; pointerDepth = $3} }
    | BaseType Pointers         { {baseType = $1; isConst = false; pointerDepth = $2} }

Pointers:
    | ASTER Pointers { $2 + 1 }
    |                { 0 }

BaseType:
    | NAME                  { GeneralType $1 }
    | STRUCT NAME           { StructType $2 }
    | INT                   { IntType }
    | VOID                  { VoidType }
    | CHAR                  { CharType }
    | UNSIGNED LONG LONG    { UnsignedLongLongType }
    | LONG LONG             { LongLongType }
    | UNSIGNED              { UnsignedIntType }
    | UINT8                 { UnsignedByteType }
    | DOUBLE                { DoubleType }

Params:
    | Param COMMA Params    { $1 :: $3 }
    | Param                 { [$1] }
    |                       { [] }

Param:
    | FullType NAME     { ($1, Some $2) }
    | FullType          { ($1, None) }

